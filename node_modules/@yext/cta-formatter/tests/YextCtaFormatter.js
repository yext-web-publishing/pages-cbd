import YextCtaFormatter from '../src/YextCtaFormatter';

const yextCtaFormatter = new YextCtaFormatter();
const getLink = obj => yextCtaFormatter.generateCTAFieldTypeLink(obj);

describe('formatting cta object links', () => {
  it('works with a URL cta object', () => {
    const cta = {
      label: 'Link me',
      linkType: 'URL',
      link: 'https://yext.com'
    };
    const link = getLink(cta);
    expect(link).toEqual('https://yext.com');
  });

  it('works with a Phone cta object', () => {
    const cta = {
      label: 'Call Me',
      linkType: 'Phone',
      link: '+1011011101'
    };
    const link = getLink(cta);
    expect(link).toEqual('tel:+1011011101');
  });

  it('works with an Email cta object', () => {
    const cta = {
      label: 'Email Me',
      linkType: 'Email',
      link: 'anonymous@yext.com'
    };
    const link = getLink(cta);
    expect(link).toEqual('mailto:anonymous@yext.com');
  });

  it('works with an Other cta object', () => {
    const cta = {
      label: 'This is my other CTA',
      linkType: 'Other',
      link: 'this is other'
    };
    const link = getLink(cta);
    expect(link).toEqual('this is other');
  });

  it('should console error on undefined CTA', () => {
    const consoleSpy = jest
    .spyOn(console, 'error')
    .mockImplementation(() => {});
    const cta = undefined;
    const link = getLink(cta);
    expect(link).toEqual('');
    expect(consoleSpy).toHaveBeenCalled();
  });

  it('should console error on missing CTA link type data', () => {
    const consoleSpy = jest
    .spyOn(console, 'error')
    .mockImplementation(() => {});
    const cta = {
      label: 'This is my other CTA',
      link: 'this is other'
    }
    const link = getLink(cta);
    expect(link).toEqual('');
    expect(consoleSpy).toHaveBeenCalled();
  });

  it('should console error on missing CTA link data', () => {
    const consoleSpy = jest
    .spyOn(console, 'error')
    .mockImplementation(() => {});
    const cta = {
      label: 'This is my other CTA',
      linkType: 'Other',
    }
    const link = getLink(cta);
    expect(link).toEqual('');
    expect(consoleSpy).toHaveBeenCalled();
  });
});
